{"version":3,"file":"stringUtils-C76NxA_T.js","sources":["../../src/utils/stringUtils.ts"],"sourcesContent":["/**\n * 日時文字列生成処理\n * @param date Dateオブジェクト\n * @param delimiter 年月日のデリミタ\n * @param appendHms 時:分を追加する\n * @returns 日時文字列\n */\nexport function formatDateString(date: Date, delimiter: string, appendHms: boolean = false): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // 月は0から始まるので +1\n  const day = String(date.getDate()).padStart(2, '0');\n\n  let dateString = `${year}${delimiter}${month}${delimiter}${day}`;\n\n  if (appendHms) {\n    dateString += ` ${formatHhMmString(date)}`;\n  }\n  return dateString;\n}\n\n/**\n * 時分文字列生成処理\n * @param date Dateオブジェクト\n * @returns 'hh:mm' 形式の文字列\n */\nexport function formatHhMmString(date: Date): string {\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  return `${hours}:${minutes}`;\n}\n\n/**\n * '分'を 'hh:mm:ss' 形式に変換する\n * @param minutes 分\n * @returns 'hh:mm:ss' 形式の文字列\n */\nexport function convertMinutesToHHMMSS(minutes: number): string {\n  // 時間、分、秒を計算\n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  const seconds = 0; // 秒は常に0とする\n\n  // 各値を2桁の文字列に変換\n  const formattedHours = String(hours).padStart(2, '0');\n  const formattedMinutes = String(remainingMinutes).padStart(2, '0');\n  const formattedSeconds = String(seconds).padStart(2, '0');\n\n  // 'hh:mm:ss' 形式で返す\n  return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n}\n\n/**\n * 時間帯リスト生成処理\n * @param start 開始時刻('hh:MM'形式)\n * @param end 終了時刻('hh:MM'形式)\n * @param interval 時刻間隔\n * @returns 時間帯リスト\n */\nexport function generateTimeSlots(start: string, end: string, interval: number) {\n  const slots = [];\n  const [startHour, startMinute] = start.split(\":\").map(Number);\n  const [endHour, endMinute] = end.split(\":\").map(Number);\n\n  let currentHour = startHour;\n  let currentMinute = startMinute;\n\n  while (\n    currentHour < endHour ||\n    (currentHour === endHour && currentMinute < endMinute)\n  ) {\n    const nextMinute = currentMinute + interval;\n    let nextHour = currentHour;\n    if (nextMinute >= 60) {\n      nextHour += 1;\n    }\n\n    const slotStart = `${padTime(currentHour)}:${padTime(currentMinute)}`;\n    slots.push(`${slotStart}`);\n\n    currentHour = nextHour;\n    currentMinute = nextMinute % 60;\n  }\n  return slots;\n}\n\nfunction padTime(value: number) {\n  return value.toString().padStart(2, \"0\");\n}\n"],"names":["formatDateString","date","delimiter","appendHms","year","month","day","dateString","formatHhMmString","hours","minutes","convertMinutesToHHMMSS","remainingMinutes","seconds","formattedHours","formattedMinutes","formattedSeconds","generateTimeSlots","start","end","interval","slots","startHour","startMinute","endHour","endMinute","currentHour","currentMinute","nextMinute","nextHour","slotStart","padTime","value"],"mappings":"AAOO,SAASA,EAAiBC,EAAYC,EAAmBC,EAAqB,GAAe,CAC5F,MAAAC,EAAOH,EAAK,YAAY,EACxBI,EAAQ,OAAOJ,EAAK,SAAA,EAAa,CAAC,EAAE,SAAS,EAAG,GAAG,EACnDK,EAAM,OAAOL,EAAK,QAAS,CAAA,EAAE,SAAS,EAAG,GAAG,EAE9C,IAAAM,EAAa,GAAGH,CAAI,GAAGF,CAAS,GAAGG,CAAK,GAAGH,CAAS,GAAGI,CAAG,GAE9D,OAAIH,IACYI,GAAA,IAAIC,EAAiBP,CAAI,CAAC,IAEnCM,CACT,CAOO,SAASC,EAAiBP,EAAoB,CAC7C,MAAAQ,EAAQ,OAAOR,EAAK,SAAU,CAAA,EAAE,SAAS,EAAG,GAAG,EAC/CS,EAAU,OAAOT,EAAK,WAAY,CAAA,EAAE,SAAS,EAAG,GAAG,EAClD,MAAA,GAAGQ,CAAK,IAAIC,CAAO,EAC5B,CAOO,SAASC,EAAuBD,EAAyB,CAE9D,MAAMD,EAAQ,KAAK,MAAMC,EAAU,EAAE,EAC/BE,EAAmBF,EAAU,GAC7BG,EAAU,EAGVC,EAAiB,OAAOL,CAAK,EAAE,SAAS,EAAG,GAAG,EAC9CM,EAAmB,OAAOH,CAAgB,EAAE,SAAS,EAAG,GAAG,EAC3DI,EAAmB,OAAOH,CAAO,EAAE,SAAS,EAAG,GAAG,EAGxD,MAAO,GAAGC,CAAc,IAAIC,CAAgB,IAAIC,CAAgB,EAClE,CASgB,SAAAC,EAAkBC,EAAeC,EAAaC,EAAkB,CAC9E,MAAMC,EAAQ,CAAC,EACT,CAACC,EAAWC,CAAW,EAAIL,EAAM,MAAM,GAAG,EAAE,IAAI,MAAM,EACtD,CAACM,EAASC,CAAS,EAAIN,EAAI,MAAM,GAAG,EAAE,IAAI,MAAM,EAEtD,IAAIO,EAAcJ,EACdK,EAAgBJ,EAEpB,KACEG,EAAcF,GACbE,IAAgBF,GAAWG,EAAgBF,GAC5C,CACA,MAAMG,EAAaD,EAAgBP,EACnC,IAAIS,EAAWH,EACXE,GAAc,KACJC,GAAA,GAGR,MAAAC,EAAY,GAAGC,EAAQL,CAAW,CAAC,IAAIK,EAAQJ,CAAa,CAAC,GAC7DN,EAAA,KAAK,GAAGS,CAAS,EAAE,EAEXJ,EAAAG,EACdF,EAAgBC,EAAa,EAAA,CAExB,OAAAP,CACT,CAEA,SAASU,EAAQC,EAAe,CAC9B,OAAOA,EAAM,SAAA,EAAW,SAAS,EAAG,GAAG,CACzC"}